"""
Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
	nums1 = [3,  4,  6,  5]
	nums2 = [9,  1,  2,  5,  8,  3]
	k = 5
	return [9,  8,  6,  5,  3]

Example 2:
	nums1 = [6,  7]
	nums2 = [6,  0,  4]
	k = 5
	return [6,  7,  6,  0,  4]

Example 3:
	nums1 = [3,  9]
	nums2 = [8,  9]
	k = 3
	return [9,  8,  9]

"""


class Solution(object):

	def build_max_list(self, nums, max_len):
		a = sorted(range(0, max_len), cmp=lambda x, y: nums[x] - nums[y], reverse=True)

		max_list = [-1] * max_len
		max = -1
		next_idx = 0
		final_len = 0
		for i, value in enumerate(a):
			if value >= max:
				max = value
				max_list[next_idx] = value
				next_idx += 1
				final_len += 1
		return max_list, final_len, max_len

	def next_max(self, nums, current_len, max_list, max_start, max_end):

		value = nums[current_len]
		position = max_end
		for i in range(max_start, max_end):
			if value > nums[max_list[i]]:
				position = i
				break

		max_list[position] = current_len

		# postion as new max_end
		return position + 1




	def maxNumber(self, nums1, nums2, k):
		"""
		:type nums1: List[int]
		:type nums2: List[int]
		:type k: int
		:rtype: List[int]
		"""


		# init data
		nums, num_lens, max_lists, max_starts, max_ends, current_lens = [nums1, nums2], [], [], [0, 0], [], []

		for i in (0, 1):
			max_len = min(len(nums[i]), len(nums[i]) - (k - len(nums[1-i])) + 1)
			max_list, max_len, current_len = self.build_max_list(nums[i],max_len)
			current_lens.append(current_len)
			max_lists.append(max_list)
			max_ends.append(max_len)
			num_lens.append(len(nums[i]))

		print max_lists
		available = max_ends[0] + max_ends[1] + num_lens[0] - current_lens[0] + num_lens[1] - current_lens[1]
		print max_ends[0], max_starts[0],  max_ends[1],  max_starts[1], num_lens[0] ,  current_lens[0] ,  num_lens[1] ,  current_lens[1]
		print available, k
		if available < k:
			print "need to rebuild ..."
			tops = [nums[i][max_lists[i][max_starts[i]]] if max_starts[i]< max_ends[i] else -1 for i in (0, 1)]
			rebuild_idx = 0
			if tops[0] > tops[1]:
				rebuild_idx = 1
			rebuild_len = k - (max_ends[1-rebuild_idx] + num_lens[1-rebuild_idx] - current_lens[1-rebuild_idx])
			print rebuild_len




		result = []
		result_len = 0

		while True:
			tops = [nums[i][max_lists[i][max_starts[i]]] if max_starts[i]< max_ends[i] else -1 for i in (0, 1)]
			max_idx = 0
			print tops
			if tops[0] < tops[1]:
				max_idx = 1

			result.append(tops[max_idx])

			max_starts[max_idx] += 1

			result_len += 1
			if result_len == k:
				break


			if current_lens[max_idx] < num_lens[max_idx]:
				new_max_end = self.next_max(
					nums[max_idx],
					current_lens[max_idx],
					max_lists[max_idx],
					max_starts[max_idx],
					max_ends[max_idx]
				)

				max_ends[max_idx] = new_max_end

				current_lens[max_idx] += 1

		return result



solution = Solution()

# print solution.maxNumber([1, 7, 9, 2, 4, 7, 1], [3, 4, 5, 7, 1], 6)
print solution.maxNumber([1, 7, 9, 7, 1], [3,  7, 1], 6)

